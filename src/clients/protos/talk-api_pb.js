// source: talk-api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.talk_api.AssistantConversationAssistantMessage', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationAssistantMessage.MessageCase', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationConfiguration', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationInterruption', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationInterruption.InterruptionType', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationMessageAudioContent', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationMessageTextContent', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationUserMessage', null, global);
goog.exportSymbol('proto.talk_api.AssistantConversationUserMessage.MessageCase', null, global);
goog.exportSymbol('proto.talk_api.AssistantDefinition', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingRequest', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingRequest.RequestCase', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingResponse', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingResponse.DataCase', null, global);
goog.exportSymbol('proto.talk_api.CreateBulkPhoneCallRequest', null, global);
goog.exportSymbol('proto.talk_api.CreateBulkPhoneCallResponse', null, global);
goog.exportSymbol('proto.talk_api.CreateConversationMetricRequest', null, global);
goog.exportSymbol('proto.talk_api.CreateConversationMetricResponse', null, global);
goog.exportSymbol('proto.talk_api.CreateMessageMetricRequest', null, global);
goog.exportSymbol('proto.talk_api.CreateMessageMetricResponse', null, global);
goog.exportSymbol('proto.talk_api.CreatePhoneCallRequest', null, global);
goog.exportSymbol('proto.talk_api.CreatePhoneCallResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantDefinition.displayName = 'proto.talk_api.AssistantDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantConversationConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationConfiguration.displayName = 'proto.talk_api.AssistantConversationConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationInterruption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantConversationInterruption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationInterruption.displayName = 'proto.talk_api.AssistantConversationInterruption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationMessageTextContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantConversationMessageTextContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationMessageTextContent.displayName = 'proto.talk_api.AssistantConversationMessageTextContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationMessageAudioContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantConversationMessageAudioContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationMessageAudioContent.displayName = 'proto.talk_api.AssistantConversationMessageAudioContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationUserMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.talk_api.AssistantConversationUserMessage.oneofGroups_);
};
goog.inherits(proto.talk_api.AssistantConversationUserMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationUserMessage.displayName = 'proto.talk_api.AssistantConversationUserMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantConversationAssistantMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.talk_api.AssistantConversationAssistantMessage.oneofGroups_);
};
goog.inherits(proto.talk_api.AssistantConversationAssistantMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantConversationAssistantMessage.displayName = 'proto.talk_api.AssistantConversationAssistantMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantMessagingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.talk_api.AssistantMessagingRequest.oneofGroups_);
};
goog.inherits(proto.talk_api.AssistantMessagingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantMessagingRequest.displayName = 'proto.talk_api.AssistantMessagingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantMessagingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.talk_api.AssistantMessagingResponse.oneofGroups_);
};
goog.inherits(proto.talk_api.AssistantMessagingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantMessagingResponse.displayName = 'proto.talk_api.AssistantMessagingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateMessageMetricRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateMessageMetricRequest.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateMessageMetricRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateMessageMetricRequest.displayName = 'proto.talk_api.CreateMessageMetricRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateMessageMetricResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateMessageMetricResponse.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateMessageMetricResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateMessageMetricResponse.displayName = 'proto.talk_api.CreateMessageMetricResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateConversationMetricRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateConversationMetricRequest.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateConversationMetricRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateConversationMetricRequest.displayName = 'proto.talk_api.CreateConversationMetricRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateConversationMetricResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateConversationMetricResponse.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateConversationMetricResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateConversationMetricResponse.displayName = 'proto.talk_api.CreateConversationMetricResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreatePhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.CreatePhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreatePhoneCallRequest.displayName = 'proto.talk_api.CreatePhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreatePhoneCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.CreatePhoneCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreatePhoneCallResponse.displayName = 'proto.talk_api.CreatePhoneCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateBulkPhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateBulkPhoneCallRequest.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateBulkPhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateBulkPhoneCallRequest.displayName = 'proto.talk_api.CreateBulkPhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.CreateBulkPhoneCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.CreateBulkPhoneCallResponse.repeatedFields_, null);
};
goog.inherits(proto.talk_api.CreateBulkPhoneCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.CreateBulkPhoneCallResponse.displayName = 'proto.talk_api.CreateBulkPhoneCallResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantDefinition;
  return proto.talk_api.AssistantDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.AssistantDefinition.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantDefinition} returns this
 */
proto.talk_api.AssistantDefinition.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.talk_api.AssistantDefinition.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantDefinition} returns this
 */
proto.talk_api.AssistantDefinition.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    assistant: (f = msg.getAssistant()) && proto.talk_api.AssistantDefinition.toObject(includeInstance, f),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    argsMap: (f = msg.getArgsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationConfiguration}
 */
proto.talk_api.AssistantConversationConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationConfiguration;
  return proto.talk_api.AssistantConversationConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationConfiguration}
 */
proto.talk_api.AssistantConversationConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 2:
      var value = new proto.talk_api.AssistantDefinition;
      reader.readMessage(value,proto.talk_api.AssistantDefinition.deserializeBinaryFromReader);
      msg.setAssistant(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 5:
      var value = msg.getArgsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 6:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantconversationid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAssistant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.talk_api.AssistantDefinition.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getArgsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional uint64 assistantConversationId = 1;
 * @return {string}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional AssistantDefinition assistant = 2;
 * @return {?proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getAssistant = function() {
  return /** @type{?proto.talk_api.AssistantDefinition} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantDefinition, 2));
};


/**
 * @param {?proto.talk_api.AssistantDefinition|undefined} value
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
*/
proto.talk_api.AssistantConversationConfiguration.prototype.setAssistant = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.clearAssistant = function() {
  return this.setAssistant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.hasAssistant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
*/
proto.talk_api.AssistantConversationConfiguration.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, google.protobuf.Any> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> args = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getArgsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.clearArgsMap = function() {
  this.getArgsMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> options = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantConversationConfiguration.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantConversationConfiguration} returns this
 */
proto.talk_api.AssistantConversationConfiguration.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationInterruption.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationInterruption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationInterruption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationInterruption.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationInterruption}
 */
proto.talk_api.AssistantConversationInterruption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationInterruption;
  return proto.talk_api.AssistantConversationInterruption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationInterruption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationInterruption}
 */
proto.talk_api.AssistantConversationInterruption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.talk_api.AssistantConversationInterruption.InterruptionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationInterruption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationInterruption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationInterruption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationInterruption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.talk_api.AssistantConversationInterruption.InterruptionType = {
  INTERRUPTION_TYPE_UNSPECIFIED: 0,
  INTERRUPTION_TYPE_VAD: 1,
  INTERRUPTION_TYPE_WORD: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.talk_api.AssistantConversationInterruption.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantConversationInterruption} returns this
 */
proto.talk_api.AssistantConversationInterruption.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InterruptionType type = 2;
 * @return {!proto.talk_api.AssistantConversationInterruption.InterruptionType}
 */
proto.talk_api.AssistantConversationInterruption.prototype.getType = function() {
  return /** @type {!proto.talk_api.AssistantConversationInterruption.InterruptionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.talk_api.AssistantConversationInterruption.InterruptionType} value
 * @return {!proto.talk_api.AssistantConversationInterruption} returns this
 */
proto.talk_api.AssistantConversationInterruption.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.talk_api.AssistantConversationInterruption.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.talk_api.AssistantConversationInterruption} returns this
*/
proto.talk_api.AssistantConversationInterruption.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationInterruption} returns this
 */
proto.talk_api.AssistantConversationInterruption.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationInterruption.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationMessageTextContent.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationMessageTextContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationMessageTextContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationMessageTextContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationMessageTextContent}
 */
proto.talk_api.AssistantConversationMessageTextContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationMessageTextContent;
  return proto.talk_api.AssistantConversationMessageTextContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationMessageTextContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationMessageTextContent}
 */
proto.talk_api.AssistantConversationMessageTextContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationMessageTextContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationMessageTextContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationMessageTextContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationMessageTextContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.talk_api.AssistantConversationMessageTextContent.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantConversationMessageTextContent} returns this
 */
proto.talk_api.AssistantConversationMessageTextContent.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationMessageAudioContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationMessageAudioContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationMessageAudioContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationMessageAudioContent}
 */
proto.talk_api.AssistantConversationMessageAudioContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationMessageAudioContent;
  return proto.talk_api.AssistantConversationMessageAudioContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationMessageAudioContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationMessageAudioContent}
 */
proto.talk_api.AssistantConversationMessageAudioContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationMessageAudioContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationMessageAudioContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationMessageAudioContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.talk_api.AssistantConversationMessageAudioContent} returns this
 */
proto.talk_api.AssistantConversationMessageAudioContent.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.talk_api.AssistantConversationUserMessage.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.talk_api.AssistantConversationUserMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  AUDIO: 10,
  TEXT: 11
};

/**
 * @return {proto.talk_api.AssistantConversationUserMessage.MessageCase}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getMessageCase = function() {
  return /** @type {proto.talk_api.AssistantConversationUserMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.talk_api.AssistantConversationUserMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationUserMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationUserMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationUserMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    audio: (f = msg.getAudio()) && proto.talk_api.AssistantConversationMessageAudioContent.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.talk_api.AssistantConversationMessageTextContent.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationUserMessage}
 */
proto.talk_api.AssistantConversationUserMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationUserMessage;
  return proto.talk_api.AssistantConversationUserMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationUserMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationUserMessage}
 */
proto.talk_api.AssistantConversationUserMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.talk_api.AssistantConversationMessageAudioContent;
      reader.readMessage(value,proto.talk_api.AssistantConversationMessageAudioContent.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 11:
      var value = new proto.talk_api.AssistantConversationMessageTextContent;
      reader.readMessage(value,proto.talk_api.AssistantConversationMessageTextContent.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationUserMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationUserMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationUserMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.talk_api.AssistantConversationMessageAudioContent.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.talk_api.AssistantConversationMessageTextContent.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssistantConversationMessageAudioContent audio = 10;
 * @return {?proto.talk_api.AssistantConversationMessageAudioContent}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getAudio = function() {
  return /** @type{?proto.talk_api.AssistantConversationMessageAudioContent} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationMessageAudioContent, 10));
};


/**
 * @param {?proto.talk_api.AssistantConversationMessageAudioContent|undefined} value
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
*/
proto.talk_api.AssistantConversationUserMessage.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.talk_api.AssistantConversationUserMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
 */
proto.talk_api.AssistantConversationUserMessage.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional AssistantConversationMessageTextContent text = 11;
 * @return {?proto.talk_api.AssistantConversationMessageTextContent}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getText = function() {
  return /** @type{?proto.talk_api.AssistantConversationMessageTextContent} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationMessageTextContent, 11));
};


/**
 * @param {?proto.talk_api.AssistantConversationMessageTextContent|undefined} value
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
*/
proto.talk_api.AssistantConversationUserMessage.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.talk_api.AssistantConversationUserMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
 */
proto.talk_api.AssistantConversationUserMessage.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.hasText = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
 */
proto.talk_api.AssistantConversationUserMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * @return {boolean}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
 */
proto.talk_api.AssistantConversationUserMessage.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
*/
proto.talk_api.AssistantConversationUserMessage.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationUserMessage} returns this
 */
proto.talk_api.AssistantConversationUserMessage.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationUserMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.talk_api.AssistantConversationAssistantMessage.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.talk_api.AssistantConversationAssistantMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  AUDIO: 10,
  TEXT: 11
};

/**
 * @return {proto.talk_api.AssistantConversationAssistantMessage.MessageCase}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getMessageCase = function() {
  return /** @type {proto.talk_api.AssistantConversationAssistantMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.talk_api.AssistantConversationAssistantMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantConversationAssistantMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantConversationAssistantMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationAssistantMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    audio: (f = msg.getAudio()) && proto.talk_api.AssistantConversationMessageAudioContent.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.talk_api.AssistantConversationMessageTextContent.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantConversationAssistantMessage}
 */
proto.talk_api.AssistantConversationAssistantMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantConversationAssistantMessage;
  return proto.talk_api.AssistantConversationAssistantMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantConversationAssistantMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantConversationAssistantMessage}
 */
proto.talk_api.AssistantConversationAssistantMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.talk_api.AssistantConversationMessageAudioContent;
      reader.readMessage(value,proto.talk_api.AssistantConversationMessageAudioContent.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 11:
      var value = new proto.talk_api.AssistantConversationMessageTextContent;
      reader.readMessage(value,proto.talk_api.AssistantConversationMessageTextContent.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantConversationAssistantMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantConversationAssistantMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantConversationAssistantMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.talk_api.AssistantConversationMessageAudioContent.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.talk_api.AssistantConversationMessageTextContent.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssistantConversationMessageAudioContent audio = 10;
 * @return {?proto.talk_api.AssistantConversationMessageAudioContent}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getAudio = function() {
  return /** @type{?proto.talk_api.AssistantConversationMessageAudioContent} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationMessageAudioContent, 10));
};


/**
 * @param {?proto.talk_api.AssistantConversationMessageAudioContent|undefined} value
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
*/
proto.talk_api.AssistantConversationAssistantMessage.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.talk_api.AssistantConversationAssistantMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional AssistantConversationMessageTextContent text = 11;
 * @return {?proto.talk_api.AssistantConversationMessageTextContent}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getText = function() {
  return /** @type{?proto.talk_api.AssistantConversationMessageTextContent} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationMessageTextContent, 11));
};


/**
 * @param {?proto.talk_api.AssistantConversationMessageTextContent|undefined} value
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
*/
proto.talk_api.AssistantConversationAssistantMessage.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.talk_api.AssistantConversationAssistantMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.hasText = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * @return {boolean}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
*/
proto.talk_api.AssistantConversationAssistantMessage.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantConversationAssistantMessage} returns this
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantConversationAssistantMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.talk_api.AssistantMessagingRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.talk_api.AssistantMessagingRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  CONFIGURATION: 2,
  MESSAGE: 3
};

/**
 * @return {proto.talk_api.AssistantMessagingRequest.RequestCase}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getRequestCase = function() {
  return /** @type {proto.talk_api.AssistantMessagingRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.talk_api.AssistantMessagingRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantMessagingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantMessagingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantMessagingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: (f = msg.getConfiguration()) && proto.talk_api.AssistantConversationConfiguration.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.talk_api.AssistantConversationUserMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantMessagingRequest}
 */
proto.talk_api.AssistantMessagingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantMessagingRequest;
  return proto.talk_api.AssistantMessagingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantMessagingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantMessagingRequest}
 */
proto.talk_api.AssistantMessagingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.talk_api.AssistantConversationConfiguration;
      reader.readMessage(value,proto.talk_api.AssistantConversationConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 3:
      var value = new proto.talk_api.AssistantConversationUserMessage;
      reader.readMessage(value,proto.talk_api.AssistantConversationUserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantMessagingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantMessagingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantMessagingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.talk_api.AssistantConversationConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.talk_api.AssistantConversationUserMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssistantConversationConfiguration configuration = 2;
 * @return {?proto.talk_api.AssistantConversationConfiguration}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getConfiguration = function() {
  return /** @type{?proto.talk_api.AssistantConversationConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationConfiguration, 2));
};


/**
 * @param {?proto.talk_api.AssistantConversationConfiguration|undefined} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
*/
proto.talk_api.AssistantMessagingRequest.prototype.setConfiguration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.talk_api.AssistantMessagingRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingRequest.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssistantConversationUserMessage message = 3;
 * @return {?proto.talk_api.AssistantConversationUserMessage}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getMessage = function() {
  return /** @type{?proto.talk_api.AssistantConversationUserMessage} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationUserMessage, 3));
};


/**
 * @param {?proto.talk_api.AssistantConversationUserMessage|undefined} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
*/
proto.talk_api.AssistantMessagingRequest.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.talk_api.AssistantMessagingRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.talk_api.AssistantMessagingResponse.oneofGroups_ = [[9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.talk_api.AssistantMessagingResponse.DataCase = {
  DATA_NOT_SET: 0,
  CONFIGURATION: 9,
  INTERRUPTION: 10,
  USER: 11,
  ASSISTANT: 12,
  MESSAGE: 13
};

/**
 * @return {proto.talk_api.AssistantMessagingResponse.DataCase}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getDataCase = function() {
  return /** @type {proto.talk_api.AssistantMessagingResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantMessagingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantMessagingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantMessagingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    configuration: (f = msg.getConfiguration()) && proto.talk_api.AssistantConversationConfiguration.toObject(includeInstance, f),
    interruption: (f = msg.getInterruption()) && proto.talk_api.AssistantConversationInterruption.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.talk_api.AssistantConversationUserMessage.toObject(includeInstance, f),
    assistant: (f = msg.getAssistant()) && proto.talk_api.AssistantConversationAssistantMessage.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && common_pb.AssistantConversationMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantMessagingResponse}
 */
proto.talk_api.AssistantMessagingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantMessagingResponse;
  return proto.talk_api.AssistantMessagingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantMessagingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantMessagingResponse}
 */
proto.talk_api.AssistantMessagingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 9:
      var value = new proto.talk_api.AssistantConversationConfiguration;
      reader.readMessage(value,proto.talk_api.AssistantConversationConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 10:
      var value = new proto.talk_api.AssistantConversationInterruption;
      reader.readMessage(value,proto.talk_api.AssistantConversationInterruption.deserializeBinaryFromReader);
      msg.setInterruption(value);
      break;
    case 11:
      var value = new proto.talk_api.AssistantConversationUserMessage;
      reader.readMessage(value,proto.talk_api.AssistantConversationUserMessage.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 12:
      var value = new proto.talk_api.AssistantConversationAssistantMessage;
      reader.readMessage(value,proto.talk_api.AssistantConversationAssistantMessage.deserializeBinaryFromReader);
      msg.setAssistant(value);
      break;
    case 13:
      var value = new common_pb.AssistantConversationMessage;
      reader.readMessage(value,common_pb.AssistantConversationMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantMessagingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantMessagingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantMessagingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.talk_api.AssistantConversationConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getInterruption();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.talk_api.AssistantConversationInterruption.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.talk_api.AssistantConversationUserMessage.serializeBinaryToWriter
    );
  }
  f = message.getAssistant();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.talk_api.AssistantConversationAssistantMessage.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      common_pb.AssistantConversationMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AssistantConversationConfiguration configuration = 9;
 * @return {?proto.talk_api.AssistantConversationConfiguration}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getConfiguration = function() {
  return /** @type{?proto.talk_api.AssistantConversationConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationConfiguration, 9));
};


/**
 * @param {?proto.talk_api.AssistantConversationConfiguration|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setConfiguration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional AssistantConversationInterruption interruption = 10;
 * @return {?proto.talk_api.AssistantConversationInterruption}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getInterruption = function() {
  return /** @type{?proto.talk_api.AssistantConversationInterruption} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationInterruption, 10));
};


/**
 * @param {?proto.talk_api.AssistantConversationInterruption|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setInterruption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearInterruption = function() {
  return this.setInterruption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasInterruption = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional AssistantConversationUserMessage user = 11;
 * @return {?proto.talk_api.AssistantConversationUserMessage}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getUser = function() {
  return /** @type{?proto.talk_api.AssistantConversationUserMessage} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationUserMessage, 11));
};


/**
 * @param {?proto.talk_api.AssistantConversationUserMessage|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AssistantConversationAssistantMessage assistant = 12;
 * @return {?proto.talk_api.AssistantConversationAssistantMessage}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getAssistant = function() {
  return /** @type{?proto.talk_api.AssistantConversationAssistantMessage} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantConversationAssistantMessage, 12));
};


/**
 * @param {?proto.talk_api.AssistantConversationAssistantMessage|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setAssistant = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearAssistant = function() {
  return this.setAssistant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasAssistant = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AssistantConversationMessage message = 13;
 * @return {?proto.AssistantConversationMessage}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getMessage = function() {
  return /** @type{?proto.AssistantConversationMessage} */ (
    jspb.Message.getWrapperField(this, common_pb.AssistantConversationMessage, 13));
};


/**
 * @param {?proto.AssistantConversationMessage|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateMessageMetricRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateMessageMetricRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateMessageMetricRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateMessageMetricRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    messageid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    common_pb.Metric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateMessageMetricRequest}
 */
proto.talk_api.CreateMessageMetricRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateMessageMetricRequest;
  return proto.talk_api.CreateMessageMetricRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateMessageMetricRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateMessageMetricRequest}
 */
proto.talk_api.CreateMessageMetricRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 4:
      var value = new common_pb.Metric;
      reader.readMessage(value,common_pb.Metric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateMessageMetricRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateMessageMetricRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateMessageMetricRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAssistantconversationid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Metric.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreateMessageMetricRequest} returns this
 */
proto.talk_api.CreateMessageMetricRequest.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 assistantConversationId = 2;
 * @return {string}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreateMessageMetricRequest} returns this
 */
proto.talk_api.CreateMessageMetricRequest.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string messageId = 3;
 * @return {string}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreateMessageMetricRequest} returns this
 */
proto.talk_api.CreateMessageMetricRequest.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Metric metrics = 4;
 * @return {!Array<!proto.Metric>}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Metric, 4));
};


/**
 * @param {!Array<!proto.Metric>} value
 * @return {!proto.talk_api.CreateMessageMetricRequest} returns this
*/
proto.talk_api.CreateMessageMetricRequest.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Metric}
 */
proto.talk_api.CreateMessageMetricRequest.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateMessageMetricRequest} returns this
 */
proto.talk_api.CreateMessageMetricRequest.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateMessageMetricResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateMessageMetricResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateMessageMetricResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateMessageMetricResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_pb.Metric.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateMessageMetricResponse}
 */
proto.talk_api.CreateMessageMetricResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateMessageMetricResponse;
  return proto.talk_api.CreateMessageMetricResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateMessageMetricResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateMessageMetricResponse}
 */
proto.talk_api.CreateMessageMetricResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.Metric;
      reader.readMessage(value,common_pb.Metric.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateMessageMetricResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateMessageMetricResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateMessageMetricResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Metric.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
 */
proto.talk_api.CreateMessageMetricResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
 */
proto.talk_api.CreateMessageMetricResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Metric data = 3;
 * @return {!Array<!proto.Metric>}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Metric, 3));
};


/**
 * @param {!Array<!proto.Metric>} value
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
*/
proto.talk_api.CreateMessageMetricResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Metric}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
 */
proto.talk_api.CreateMessageMetricResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
*/
proto.talk_api.CreateMessageMetricResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreateMessageMetricResponse} returns this
 */
proto.talk_api.CreateMessageMetricResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreateMessageMetricResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateConversationMetricRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateConversationMetricRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateConversationMetricRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateConversationMetricRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    common_pb.Metric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateConversationMetricRequest}
 */
proto.talk_api.CreateConversationMetricRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateConversationMetricRequest;
  return proto.talk_api.CreateConversationMetricRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateConversationMetricRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateConversationMetricRequest}
 */
proto.talk_api.CreateConversationMetricRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 3:
      var value = new common_pb.Metric;
      reader.readMessage(value,common_pb.Metric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateConversationMetricRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateConversationMetricRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateConversationMetricRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAssistantconversationid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Metric.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreateConversationMetricRequest} returns this
 */
proto.talk_api.CreateConversationMetricRequest.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 assistantConversationId = 2;
 * @return {string}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreateConversationMetricRequest} returns this
 */
proto.talk_api.CreateConversationMetricRequest.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated Metric metrics = 3;
 * @return {!Array<!proto.Metric>}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Metric, 3));
};


/**
 * @param {!Array<!proto.Metric>} value
 * @return {!proto.talk_api.CreateConversationMetricRequest} returns this
*/
proto.talk_api.CreateConversationMetricRequest.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Metric}
 */
proto.talk_api.CreateConversationMetricRequest.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateConversationMetricRequest} returns this
 */
proto.talk_api.CreateConversationMetricRequest.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateConversationMetricResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateConversationMetricResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateConversationMetricResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateConversationMetricResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_pb.Metric.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateConversationMetricResponse}
 */
proto.talk_api.CreateConversationMetricResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateConversationMetricResponse;
  return proto.talk_api.CreateConversationMetricResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateConversationMetricResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateConversationMetricResponse}
 */
proto.talk_api.CreateConversationMetricResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.Metric;
      reader.readMessage(value,common_pb.Metric.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateConversationMetricResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateConversationMetricResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateConversationMetricResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Metric.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
 */
proto.talk_api.CreateConversationMetricResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
 */
proto.talk_api.CreateConversationMetricResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Metric data = 3;
 * @return {!Array<!proto.Metric>}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Metric, 3));
};


/**
 * @param {!Array<!proto.Metric>} value
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
*/
proto.talk_api.CreateConversationMetricResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Metric}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
 */
proto.talk_api.CreateConversationMetricResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
*/
proto.talk_api.CreateConversationMetricResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreateConversationMetricResponse} returns this
 */
proto.talk_api.CreateConversationMetricResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreateConversationMetricResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreatePhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreatePhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreatePhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistant: (f = msg.getAssistant()) && proto.talk_api.AssistantDefinition.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    argsMap: (f = msg.getArgsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    fromnumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tonumber: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreatePhoneCallRequest}
 */
proto.talk_api.CreatePhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreatePhoneCallRequest;
  return proto.talk_api.CreatePhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreatePhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreatePhoneCallRequest}
 */
proto.talk_api.CreatePhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.talk_api.AssistantDefinition;
      reader.readMessage(value,proto.talk_api.AssistantDefinition.deserializeBinaryFromReader);
      msg.setAssistant(value);
      break;
    case 3:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 4:
      var value = msg.getArgsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 5:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromnumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTonumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreatePhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreatePhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreatePhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.talk_api.AssistantDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getArgsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getFromnumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTonumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional AssistantDefinition assistant = 1;
 * @return {?proto.talk_api.AssistantDefinition}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getAssistant = function() {
  return /** @type{?proto.talk_api.AssistantDefinition} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantDefinition, 1));
};


/**
 * @param {?proto.talk_api.AssistantDefinition|undefined} value
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
*/
proto.talk_api.CreatePhoneCallRequest.prototype.setAssistant = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.clearAssistant = function() {
  return this.setAssistant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.hasAssistant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, google.protobuf.Any> metadata = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> args = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getArgsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.clearArgsMap = function() {
  this.getArgsMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> options = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};


/**
 * optional string fromNumber = 6;
 * @return {string}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getFromnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.setFromnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string toNumber = 7;
 * @return {string}
 */
proto.talk_api.CreatePhoneCallRequest.prototype.getTonumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.CreatePhoneCallRequest} returns this
 */
proto.talk_api.CreatePhoneCallRequest.prototype.setTonumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreatePhoneCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreatePhoneCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreatePhoneCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    data: (f = msg.getData()) && common_pb.AssistantConversation.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreatePhoneCallResponse}
 */
proto.talk_api.CreatePhoneCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreatePhoneCallResponse;
  return proto.talk_api.CreatePhoneCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreatePhoneCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreatePhoneCallResponse}
 */
proto.talk_api.CreatePhoneCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversation;
      reader.readMessage(value,common_pb.AssistantConversation.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreatePhoneCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreatePhoneCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreatePhoneCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.AssistantConversation.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
 */
proto.talk_api.CreatePhoneCallResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
 */
proto.talk_api.CreatePhoneCallResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional AssistantConversation data = 3;
 * @return {?proto.AssistantConversation}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.getData = function() {
  return /** @type{?proto.AssistantConversation} */ (
    jspb.Message.getWrapperField(this, common_pb.AssistantConversation, 3));
};


/**
 * @param {?proto.AssistantConversation|undefined} value
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
*/
proto.talk_api.CreatePhoneCallResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
 */
proto.talk_api.CreatePhoneCallResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
*/
proto.talk_api.CreatePhoneCallResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreatePhoneCallResponse} returns this
 */
proto.talk_api.CreatePhoneCallResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreatePhoneCallResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateBulkPhoneCallRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateBulkPhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateBulkPhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateBulkPhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateBulkPhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phonecallsList: jspb.Message.toObjectList(msg.getPhonecallsList(),
    proto.talk_api.CreatePhoneCallRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateBulkPhoneCallRequest}
 */
proto.talk_api.CreateBulkPhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateBulkPhoneCallRequest;
  return proto.talk_api.CreateBulkPhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateBulkPhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateBulkPhoneCallRequest}
 */
proto.talk_api.CreateBulkPhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.talk_api.CreatePhoneCallRequest;
      reader.readMessage(value,proto.talk_api.CreatePhoneCallRequest.deserializeBinaryFromReader);
      msg.addPhonecalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateBulkPhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateBulkPhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateBulkPhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateBulkPhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhonecallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.talk_api.CreatePhoneCallRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CreatePhoneCallRequest phoneCalls = 6;
 * @return {!Array<!proto.talk_api.CreatePhoneCallRequest>}
 */
proto.talk_api.CreateBulkPhoneCallRequest.prototype.getPhonecallsList = function() {
  return /** @type{!Array<!proto.talk_api.CreatePhoneCallRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.talk_api.CreatePhoneCallRequest, 6));
};


/**
 * @param {!Array<!proto.talk_api.CreatePhoneCallRequest>} value
 * @return {!proto.talk_api.CreateBulkPhoneCallRequest} returns this
*/
proto.talk_api.CreateBulkPhoneCallRequest.prototype.setPhonecallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.talk_api.CreatePhoneCallRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.talk_api.CreatePhoneCallRequest}
 */
proto.talk_api.CreateBulkPhoneCallRequest.prototype.addPhonecalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.talk_api.CreatePhoneCallRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateBulkPhoneCallRequest} returns this
 */
proto.talk_api.CreateBulkPhoneCallRequest.prototype.clearPhonecallsList = function() {
  return this.setPhonecallsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.CreateBulkPhoneCallResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.CreateBulkPhoneCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.CreateBulkPhoneCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateBulkPhoneCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_pb.AssistantConversation.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse}
 */
proto.talk_api.CreateBulkPhoneCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.CreateBulkPhoneCallResponse;
  return proto.talk_api.CreateBulkPhoneCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.CreateBulkPhoneCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse}
 */
proto.talk_api.CreateBulkPhoneCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversation;
      reader.readMessage(value,common_pb.AssistantConversation.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.CreateBulkPhoneCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.CreateBulkPhoneCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.CreateBulkPhoneCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.AssistantConversation.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated AssistantConversation data = 3;
 * @return {!Array<!proto.AssistantConversation>}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.AssistantConversation>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.AssistantConversation, 3));
};


/**
 * @param {!Array<!proto.AssistantConversation>} value
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
*/
proto.talk_api.CreateBulkPhoneCallResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.AssistantConversation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AssistantConversation}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.AssistantConversation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
*/
proto.talk_api.CreateBulkPhoneCallResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.CreateBulkPhoneCallResponse} returns this
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.CreateBulkPhoneCallResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.talk_api);
