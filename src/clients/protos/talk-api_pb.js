// source: talk-api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.talk_api.AssistantDefinition', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingRequest', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingResponse', null, global);
goog.exportSymbol('proto.talk_api.AssistantMessagingResponse.DataCase', null, global);
goog.exportSymbol('proto.talk_api.GetAllAssistantConversationRequest', null, global);
goog.exportSymbol('proto.talk_api.GetAllAssistantConversationResponse', null, global);
goog.exportSymbol('proto.talk_api.GetAllConversationMessageRequest', null, global);
goog.exportSymbol('proto.talk_api.GetAllConversationMessageResponse', null, global);
goog.exportSymbol('proto.talk_api.MessageFeedbackRequest', null, global);
goog.exportSymbol('proto.talk_api.MessageFeedbackResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantDefinition.displayName = 'proto.talk_api.AssistantDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantMessagingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.AssistantMessagingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantMessagingRequest.displayName = 'proto.talk_api.AssistantMessagingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.AssistantMessagingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.talk_api.AssistantMessagingResponse.oneofGroups_);
};
goog.inherits(proto.talk_api.AssistantMessagingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.AssistantMessagingResponse.displayName = 'proto.talk_api.AssistantMessagingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.GetAllAssistantConversationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.GetAllAssistantConversationRequest.repeatedFields_, null);
};
goog.inherits(proto.talk_api.GetAllAssistantConversationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.GetAllAssistantConversationRequest.displayName = 'proto.talk_api.GetAllAssistantConversationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.GetAllAssistantConversationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.GetAllAssistantConversationResponse.repeatedFields_, null);
};
goog.inherits(proto.talk_api.GetAllAssistantConversationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.GetAllAssistantConversationResponse.displayName = 'proto.talk_api.GetAllAssistantConversationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.GetAllConversationMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.GetAllConversationMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.talk_api.GetAllConversationMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.GetAllConversationMessageRequest.displayName = 'proto.talk_api.GetAllConversationMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.GetAllConversationMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.talk_api.GetAllConversationMessageResponse.repeatedFields_, null);
};
goog.inherits(proto.talk_api.GetAllConversationMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.GetAllConversationMessageResponse.displayName = 'proto.talk_api.GetAllConversationMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.MessageFeedbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.MessageFeedbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.MessageFeedbackRequest.displayName = 'proto.talk_api.MessageFeedbackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.talk_api.MessageFeedbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.talk_api.MessageFeedbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.talk_api.MessageFeedbackResponse.displayName = 'proto.talk_api.MessageFeedbackResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantDefinition;
  return proto.talk_api.AssistantDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.AssistantDefinition.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantDefinition} returns this
 */
proto.talk_api.AssistantDefinition.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.talk_api.AssistantDefinition.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantDefinition} returns this
 */
proto.talk_api.AssistantDefinition.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantMessagingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantMessagingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantMessagingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistant: (f = msg.getAssistant()) && proto.talk_api.AssistantDefinition.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && common_pb.Message.toObject(includeInstance, f),
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    source: jspb.Message.getFieldWithDefault(msg, 7, 0),
    argsMap: (f = msg.getArgsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantMessagingRequest}
 */
proto.talk_api.AssistantMessagingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantMessagingRequest;
  return proto.talk_api.AssistantMessagingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantMessagingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantMessagingRequest}
 */
proto.talk_api.AssistantMessagingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.talk_api.AssistantDefinition;
      reader.readMessage(value,proto.talk_api.AssistantDefinition.deserializeBinaryFromReader);
      msg.setAssistant(value);
      break;
    case 3:
      var value = new common_pb.Message;
      reader.readMessage(value,common_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 6:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 7:
      var value = /** @type {!proto.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 10:
      var value = msg.getArgsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 11:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantMessagingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantMessagingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantMessagingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistant();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.talk_api.AssistantDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Message.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getArgsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional AssistantDefinition assistant = 2;
 * @return {?proto.talk_api.AssistantDefinition}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getAssistant = function() {
  return /** @type{?proto.talk_api.AssistantDefinition} */ (
    jspb.Message.getWrapperField(this, proto.talk_api.AssistantDefinition, 2));
};


/**
 * @param {?proto.talk_api.AssistantDefinition|undefined} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
*/
proto.talk_api.AssistantMessagingRequest.prototype.setAssistant = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearAssistant = function() {
  return this.setAssistant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingRequest.prototype.hasAssistant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Message message = 3;
 * @return {?proto.Message}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getMessage = function() {
  return /** @type{?proto.Message} */ (
    jspb.Message.getWrapperField(this, common_pb.Message, 3));
};


/**
 * @param {?proto.Message|undefined} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
*/
proto.talk_api.AssistantMessagingRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 assistantConversationId = 4;
 * @return {string}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearAssistantconversationid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingRequest.prototype.hasAssistantconversationid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, google.protobuf.Any> metadata = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional Source source = 7;
 * @return {!proto.Source}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getSource = function() {
  return /** @type {!proto.Source} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.Source} value
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * map<string, google.protobuf.Any> args = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getArgsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearArgsMap = function() {
  this.getArgsMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> options = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.talk_api.AssistantMessagingRequest.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.talk_api.AssistantMessagingRequest} returns this
 */
proto.talk_api.AssistantMessagingRequest.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.talk_api.AssistantMessagingResponse.oneofGroups_ = [[3,5]];

/**
 * @enum {number}
 */
proto.talk_api.AssistantMessagingResponse.DataCase = {
  DATA_NOT_SET: 0,
  MESSAGE: 3,
  EVENT: 5
};

/**
 * @return {proto.talk_api.AssistantMessagingResponse.DataCase}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getDataCase = function() {
  return /** @type {proto.talk_api.AssistantMessagingResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.AssistantMessagingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.AssistantMessagingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.AssistantMessagingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && common_pb.AssistantConversationMessage.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && common_pb.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.AssistantMessagingResponse}
 */
proto.talk_api.AssistantMessagingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.AssistantMessagingResponse;
  return proto.talk_api.AssistantMessagingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.AssistantMessagingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.AssistantMessagingResponse}
 */
proto.talk_api.AssistantMessagingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversationMessage;
      reader.readMessage(value,common_pb.AssistantConversationMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 5:
      var value = new common_pb.Event;
      reader.readMessage(value,common_pb.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.AssistantMessagingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.AssistantMessagingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.AssistantMessagingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.AssistantMessagingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.AssistantConversationMessage.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AssistantConversationMessage message = 3;
 * @return {?proto.AssistantConversationMessage}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getMessage = function() {
  return /** @type{?proto.AssistantConversationMessage} */ (
    jspb.Message.getWrapperField(this, common_pb.AssistantConversationMessage, 3));
};


/**
 * @param {?proto.AssistantConversationMessage|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Event event = 5;
 * @return {?proto.Event}
 */
proto.talk_api.AssistantMessagingResponse.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, common_pb.Event, 5));
};


/**
 * @param {?proto.Event|undefined} value
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
*/
proto.talk_api.AssistantMessagingResponse.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.talk_api.AssistantMessagingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.AssistantMessagingResponse} returns this
 */
proto.talk_api.AssistantMessagingResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.AssistantMessagingResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.GetAllAssistantConversationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.GetAllAssistantConversationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.GetAllAssistantConversationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllAssistantConversationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    paginate: (f = msg.getPaginate()) && common_pb.Paginate.toObject(includeInstance, f),
    criteriasList: jspb.Message.toObjectList(msg.getCriteriasList(),
    common_pb.Criteria.toObject, includeInstance),
    source: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.GetAllAssistantConversationRequest}
 */
proto.talk_api.GetAllAssistantConversationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.GetAllAssistantConversationRequest;
  return proto.talk_api.GetAllAssistantConversationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.GetAllAssistantConversationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.GetAllAssistantConversationRequest}
 */
proto.talk_api.GetAllAssistantConversationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = new common_pb.Paginate;
      reader.readMessage(value,common_pb.Paginate.deserializeBinaryFromReader);
      msg.setPaginate(value);
      break;
    case 3:
      var value = new common_pb.Criteria;
      reader.readMessage(value,common_pb.Criteria.deserializeBinaryFromReader);
      msg.addCriterias(value);
      break;
    case 7:
      var value = /** @type {!proto.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.GetAllAssistantConversationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.GetAllAssistantConversationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllAssistantConversationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getPaginate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Paginate.serializeBinaryToWriter
    );
  }
  f = message.getCriteriasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Criteria.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional Paginate paginate = 2;
 * @return {?proto.Paginate}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.getPaginate = function() {
  return /** @type{?proto.Paginate} */ (
    jspb.Message.getWrapperField(this, common_pb.Paginate, 2));
};


/**
 * @param {?proto.Paginate|undefined} value
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
*/
proto.talk_api.GetAllAssistantConversationRequest.prototype.setPaginate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.clearPaginate = function() {
  return this.setPaginate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.hasPaginate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Criteria criterias = 3;
 * @return {!Array<!proto.Criteria>}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.getCriteriasList = function() {
  return /** @type{!Array<!proto.Criteria>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Criteria, 3));
};


/**
 * @param {!Array<!proto.Criteria>} value
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
*/
proto.talk_api.GetAllAssistantConversationRequest.prototype.setCriteriasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Criteria=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Criteria}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.addCriterias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Criteria, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.clearCriteriasList = function() {
  return this.setCriteriasList([]);
};


/**
 * optional Source source = 7;
 * @return {!proto.Source}
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.getSource = function() {
  return /** @type {!proto.Source} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.Source} value
 * @return {!proto.talk_api.GetAllAssistantConversationRequest} returns this
 */
proto.talk_api.GetAllAssistantConversationRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.GetAllAssistantConversationResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.GetAllAssistantConversationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.GetAllAssistantConversationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllAssistantConversationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_pb.AssistantConversation.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    paginated: (f = msg.getPaginated()) && common_pb.Paginated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.GetAllAssistantConversationResponse}
 */
proto.talk_api.GetAllAssistantConversationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.GetAllAssistantConversationResponse;
  return proto.talk_api.GetAllAssistantConversationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.GetAllAssistantConversationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.GetAllAssistantConversationResponse}
 */
proto.talk_api.GetAllAssistantConversationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversation;
      reader.readMessage(value,common_pb.AssistantConversation.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = new common_pb.Paginated;
      reader.readMessage(value,common_pb.Paginated.deserializeBinaryFromReader);
      msg.setPaginated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.GetAllAssistantConversationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.GetAllAssistantConversationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllAssistantConversationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.AssistantConversation.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getPaginated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Paginated.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated AssistantConversation data = 3;
 * @return {!Array<!proto.AssistantConversation>}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.AssistantConversation>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.AssistantConversation, 3));
};


/**
 * @param {!Array<!proto.AssistantConversation>} value
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
*/
proto.talk_api.GetAllAssistantConversationResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.AssistantConversation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AssistantConversation}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.AssistantConversation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
*/
proto.talk_api.GetAllAssistantConversationResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Paginated paginated = 5;
 * @return {?proto.Paginated}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.getPaginated = function() {
  return /** @type{?proto.Paginated} */ (
    jspb.Message.getWrapperField(this, common_pb.Paginated, 5));
};


/**
 * @param {?proto.Paginated|undefined} value
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
*/
proto.talk_api.GetAllAssistantConversationResponse.prototype.setPaginated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllAssistantConversationResponse} returns this
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.clearPaginated = function() {
  return this.setPaginated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllAssistantConversationResponse.prototype.hasPaginated = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.GetAllConversationMessageRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.GetAllConversationMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.GetAllConversationMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllConversationMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    paginate: (f = msg.getPaginate()) && common_pb.Paginate.toObject(includeInstance, f),
    criteriasList: jspb.Message.toObjectList(msg.getCriteriasList(),
    common_pb.Criteria.toObject, includeInstance),
    order: (f = msg.getOrder()) && common_pb.Ordering.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.GetAllConversationMessageRequest}
 */
proto.talk_api.GetAllConversationMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.GetAllConversationMessageRequest;
  return proto.talk_api.GetAllConversationMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.GetAllConversationMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.GetAllConversationMessageRequest}
 */
proto.talk_api.GetAllConversationMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 3:
      var value = new common_pb.Paginate;
      reader.readMessage(value,common_pb.Paginate.deserializeBinaryFromReader);
      msg.setPaginate(value);
      break;
    case 4:
      var value = new common_pb.Criteria;
      reader.readMessage(value,common_pb.Criteria.deserializeBinaryFromReader);
      msg.addCriterias(value);
      break;
    case 5:
      var value = new common_pb.Ordering;
      reader.readMessage(value,common_pb.Ordering.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 7:
      var value = /** @type {!proto.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.GetAllConversationMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.GetAllConversationMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllConversationMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAssistantconversationid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getPaginate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Paginate.serializeBinaryToWriter
    );
  }
  f = message.getCriteriasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Criteria.serializeBinaryToWriter
    );
  }
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Ordering.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 assistantConversationId = 2;
 * @return {string}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional Paginate paginate = 3;
 * @return {?proto.Paginate}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getPaginate = function() {
  return /** @type{?proto.Paginate} */ (
    jspb.Message.getWrapperField(this, common_pb.Paginate, 3));
};


/**
 * @param {?proto.Paginate|undefined} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
*/
proto.talk_api.GetAllConversationMessageRequest.prototype.setPaginate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.clearPaginate = function() {
  return this.setPaginate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.hasPaginate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Criteria criterias = 4;
 * @return {!Array<!proto.Criteria>}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getCriteriasList = function() {
  return /** @type{!Array<!proto.Criteria>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Criteria, 4));
};


/**
 * @param {!Array<!proto.Criteria>} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
*/
proto.talk_api.GetAllConversationMessageRequest.prototype.setCriteriasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Criteria=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Criteria}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.addCriterias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Criteria, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.clearCriteriasList = function() {
  return this.setCriteriasList([]);
};


/**
 * optional Ordering order = 5;
 * @return {?proto.Ordering}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getOrder = function() {
  return /** @type{?proto.Ordering} */ (
    jspb.Message.getWrapperField(this, common_pb.Ordering, 5));
};


/**
 * @param {?proto.Ordering|undefined} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
*/
proto.talk_api.GetAllConversationMessageRequest.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Source source = 7;
 * @return {!proto.Source}
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.getSource = function() {
  return /** @type {!proto.Source} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.Source} value
 * @return {!proto.talk_api.GetAllConversationMessageRequest} returns this
 */
proto.talk_api.GetAllConversationMessageRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.talk_api.GetAllConversationMessageResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.GetAllConversationMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.GetAllConversationMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllConversationMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_pb.AssistantConversationMessage.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    paginated: (f = msg.getPaginated()) && common_pb.Paginated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.GetAllConversationMessageResponse}
 */
proto.talk_api.GetAllConversationMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.GetAllConversationMessageResponse;
  return proto.talk_api.GetAllConversationMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.GetAllConversationMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.GetAllConversationMessageResponse}
 */
proto.talk_api.GetAllConversationMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversationMessage;
      reader.readMessage(value,common_pb.AssistantConversationMessage.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = new common_pb.Paginated;
      reader.readMessage(value,common_pb.Paginated.deserializeBinaryFromReader);
      msg.setPaginated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.GetAllConversationMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.GetAllConversationMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.GetAllConversationMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.AssistantConversationMessage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getPaginated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Paginated.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated AssistantConversationMessage data = 3;
 * @return {!Array<!proto.AssistantConversationMessage>}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.AssistantConversationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.AssistantConversationMessage, 3));
};


/**
 * @param {!Array<!proto.AssistantConversationMessage>} value
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
*/
proto.talk_api.GetAllConversationMessageResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.AssistantConversationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AssistantConversationMessage}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.AssistantConversationMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
*/
proto.talk_api.GetAllConversationMessageResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Paginated paginated = 5;
 * @return {?proto.Paginated}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.getPaginated = function() {
  return /** @type{?proto.Paginated} */ (
    jspb.Message.getWrapperField(this, common_pb.Paginated, 5));
};


/**
 * @param {?proto.Paginated|undefined} value
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
*/
proto.talk_api.GetAllConversationMessageResponse.prototype.setPaginated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.GetAllConversationMessageResponse} returns this
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.clearPaginated = function() {
  return this.setPaginated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.GetAllConversationMessageResponse.prototype.hasPaginated = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.MessageFeedbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.MessageFeedbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.MessageFeedbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.MessageFeedbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    assistantconversationid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    assistantconversationmessageid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    feedback: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.MessageFeedbackRequest}
 */
proto.talk_api.MessageFeedbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.MessageFeedbackRequest;
  return proto.talk_api.MessageFeedbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.MessageFeedbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.MessageFeedbackRequest}
 */
proto.talk_api.MessageFeedbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAssistantconversationmessageid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.MessageFeedbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.MessageFeedbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.MessageFeedbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.MessageFeedbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAssistantconversationid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getAssistantconversationmessageid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getFeedback();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 assistantId = 1;
 * @return {string}
 */
proto.talk_api.MessageFeedbackRequest.prototype.getAssistantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.MessageFeedbackRequest} returns this
 */
proto.talk_api.MessageFeedbackRequest.prototype.setAssistantid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 assistantConversationId = 2;
 * @return {string}
 */
proto.talk_api.MessageFeedbackRequest.prototype.getAssistantconversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.MessageFeedbackRequest} returns this
 */
proto.talk_api.MessageFeedbackRequest.prototype.setAssistantconversationid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 assistantConversationMessageId = 3;
 * @return {string}
 */
proto.talk_api.MessageFeedbackRequest.prototype.getAssistantconversationmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.MessageFeedbackRequest} returns this
 */
proto.talk_api.MessageFeedbackRequest.prototype.setAssistantconversationmessageid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional string feedback = 4;
 * @return {string}
 */
proto.talk_api.MessageFeedbackRequest.prototype.getFeedback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.talk_api.MessageFeedbackRequest} returns this
 */
proto.talk_api.MessageFeedbackRequest.prototype.setFeedback = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.talk_api.MessageFeedbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.talk_api.MessageFeedbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.talk_api.MessageFeedbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.MessageFeedbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    data: (f = msg.getData()) && common_pb.AssistantConversationMessage.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.talk_api.MessageFeedbackResponse}
 */
proto.talk_api.MessageFeedbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.talk_api.MessageFeedbackResponse;
  return proto.talk_api.MessageFeedbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.talk_api.MessageFeedbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.talk_api.MessageFeedbackResponse}
 */
proto.talk_api.MessageFeedbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new common_pb.AssistantConversationMessage;
      reader.readMessage(value,common_pb.AssistantConversationMessage.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.talk_api.MessageFeedbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.talk_api.MessageFeedbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.talk_api.MessageFeedbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.talk_api.MessageFeedbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.AssistantConversationMessage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.talk_api.MessageFeedbackResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
 */
proto.talk_api.MessageFeedbackResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.talk_api.MessageFeedbackResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
 */
proto.talk_api.MessageFeedbackResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional AssistantConversationMessage data = 3;
 * @return {?proto.AssistantConversationMessage}
 */
proto.talk_api.MessageFeedbackResponse.prototype.getData = function() {
  return /** @type{?proto.AssistantConversationMessage} */ (
    jspb.Message.getWrapperField(this, common_pb.AssistantConversationMessage, 3));
};


/**
 * @param {?proto.AssistantConversationMessage|undefined} value
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
*/
proto.talk_api.MessageFeedbackResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
 */
proto.talk_api.MessageFeedbackResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.MessageFeedbackResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error error = 4;
 * @return {?proto.Error}
 */
proto.talk_api.MessageFeedbackResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 4));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
*/
proto.talk_api.MessageFeedbackResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.talk_api.MessageFeedbackResponse} returns this
 */
proto.talk_api.MessageFeedbackResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.talk_api.MessageFeedbackResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.talk_api);
